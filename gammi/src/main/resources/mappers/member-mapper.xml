<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">

	<!-- select 한 결과집합 ResultSet 에서 한 행씩 꺼내서 
	각 컬럼값들을 vo 객체의 각 필드에 저장 처리하는 작업
	: 결과 매핑
	리스트나 맵에 여러 객체를 저장 처리도 포함됨 -->
	
	<resultMap type="Member" id="resultList">
		<result property="m_id" column="m_id"/>
		<result property="m_name" column="m_name"/>
		<result property="m_nickname" column="m_nickname"/>
		<result property="m_pw" column="m_pw"/>
		<result property="m_email" column="m_email"/>
		<result property="m_birth" column="m_birth"/>
		<result property="admin" column="admin"/>
		<result property="login_ok" column="login_ok"/>
	</resultMap>
	 
	<!-- 회원가입시 아이디 중복 체크 처리용 -->
	<select id="selectCheckId" parameterType="string" resultType="_int">
		select count(m_id) from member
		where m_id = #{ m_id }
	</select>
	
	<!-- 회원가입시 닉네임 중복 체크 처리용 -->
	<select id="selectCheckNick" parameterType="string" resultType="_int">
		select count(m_nickname) from member
		where m_nickname = #{ m_nickname }
	</select>
	
	
	<insert id="insertMember" parameterType="Member">
		insert into member (m_id, m_name, m_nickname, m_pw, m_email, m_birth ,login_ok, admin)
		values ( #{m_id}, #{m_name}, #{m_nickname}, #{m_pw}, #{m_email}, #{ m_birth}, default, default)
	</insert>
	
	<!-- 회원 아이디(userid)로 회원정보 조회 -->
	<select id="selectMember" parameterType="string" resultType="Member">
		select * from member
		where m_id = #{ m_id }
	</select>
	
	<select id="selectList" parameterType="Paging" resultMap="resultList">
	<![CDATA[
		SELECT *  
		FROM (SELECT ROWNUM RNUM, m_id, m_nickname, m_pw, m_email, m_birth, admin, login_ok
		       FROM (SELECT * FROM MEMBER 
		              ORDER BY m_id DESC))  
		where rnum >= #{startRow} and rnum <= #{endRow}
	]]>
	</select>
	
	<select id="getListCount" resultType="_int">
		select count(*) from member
	</select>
	
	<!-- 회원가입시 이메일 중복 체크 처리 -->
	<select id = "selectMailCheck" parameterType="String" resultType="_int">
		select count(m_email) from member
		where m_email = #{ m_email }
	</select>
	
	<update id="updateMember" parameterType="Member">
		update member
		set m_pw = #{ m_pw },
			m_email = #{ m_email },
			m_nickname = #{ m_nickname},
			m_birth = #{ m_birth },
			m_name = #{ m_name }
		where m_id = #{ m_id } 
	</update>
	
	<delete id="deleteMember" parameterType="string">
		delete from member
		where m_id = #{ m_id }
	</delete>
	
	<select id="selectByMail" parameterType="string" resultType="Member">
		select * from member
		where m_email = #{ m_email }
	</select>
	
	<!-- 임시비밀번호 발급을 위한 회원 확인 -->
	<select id="chkSelectForPwd" parameterType="Member" resultType="_int">
		select count(m_name) from member
		where m_id = #{ m_id } and m_email = #{ m_email }
	</select>
	
	<!-- 비밀번호 분실 : 임시비밀번호 발급 -->
	<update id="findPwd" parameterType="Member">
		update member
		set m_pw = #{ m_pw }
		where m_id = #{ m_id } and m_email = #{ m_email }
	</update>
	
	<update id="updateLoginOK" parameterType="Member">
		update member
		set login_ok = #{ login_ok }
		where m_id = #{ m_id }
	</update>
	
	
	<!-- admin 회원정보 조회 -->
	<select id="userIDSearchCount" parameterType="string" resultType="_int">
	select count(*)
	from member
	where m_id like '%' || #{ keyword } || '%'
	</select>
	
	<select id="userIDSearch" parameterType="SearchPaging" resultType="Member">
	<![CDATA[
	select *  
			from (select rownum rnum, m_name, m_id, 
						  m_nickname, m_pw, 
						  m_email,  
			               m_birth, admin, 
			               login_ok
			       from (select * from member
			       		   where m_id like '%' || #{ keyword } || '%'
			               order by m_id desc )) 
			where rnum >= #{startRow} and rnum <= #{endRow}
	]]>
	</select>
	
	<select id="loginOKCount" parameterType="string" resultType="_int">
	select count(*)
	from member
	where login_ok like '%' || #{ keyword } || '%'
	</select>
	
	<select id="loginOKSearch" parameterType="SearchPaging" resultType="Member">
	<![CDATA[
	select *  
			from (select rownum rnum, m_name, m_id, 
						  m_nickname, m_pw, 
						  m_email,  
			               m_birth, admin, 
			               login_ok
			       from (select * from member
			       		   where login_ok like '%' || #{ keyword } || '%'
			               order by m_id desc )) 
			where rnum >= #{startRow} and rnum <= #{endRow}
	]]>
	</select>
</mapper>







